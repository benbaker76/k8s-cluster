- hosts: all
  become: yes
  become_user: root
  user: ubuntu
  tasks:
    - name: update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: disable swap
      shell: swapoff -a

    - name: disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: add required modules
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
          overlay
          br_netfilter
        create: true

    - name: load required modules
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: sysctl params required by setup, params persist across reboots
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        create: true

    - name: configure network settings
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch

    - name: apply sysctl params without reboot
      command: sysctl --system

    - name: install a list of packages
      apt:
        pkg:
          - apt-transport-https
          - net-tools

    - name: set hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: add cp endpoint to hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ cp_endpoint_ip }} {{ cp_endpoint }}"

    - name: add nodes to hosts
      lineinfile:
        dest: /etc/hosts
        regexp: ".*{{ item }}$"
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      when: hostvars[item].ansible_host is defined
      with_items: "{{ groups.all }}"

    - name: add k8s apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      register: apt_res
      retries: 10
      delay: 10
      until: apt_res is success

    - name: add k8s apt repo
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes

    - name: install ipvsadm
      apt:
        name: ipvsadm
        state: present
        force: yes

    - name: install kubelet
      apt:
        name: kubelet={{ k8s_version }}-00
        state: present
        update_cache: true
        allow_change_held_packages: true

    - name: install kubeadm
      apt:
        name: kubeadm={{ k8s_version }}-00
        state: present
        allow_change_held_packages: true

    - name: prevent packages from being upgraded
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubeadm
        - kubectl
        - kubelet

- hosts: control_plane
  become: yes
  become_user: root
  user: ubuntu
  tasks:
    - name: install calicoctl
      get_url:
        url: https://github.com/projectcalico/calicoctl/releases/latest/download/calicoctl-linux-amd64
        dest: /usr/local/bin/calicoctl
        owner: root
        group: root
        mode: 0755

    - name: install etcdctl
      unarchive:
        src: https://github.com/etcd-io/etcd/releases/download/v3.5.7/etcd-v3.5.7-linux-amd64.tar.gz
        dest: /usr/local/bin
        extra_opts:
          - --strip=1
          - --wildcards
          - "*/etcdctl"
        remote_src: yes
        owner: root
        group: root
        mode: 0755

    - name: install kubectl
      apt:
        name: kubectl={{ k8s_version }}-00
        state: present
        force: yes
        allow_change_held_packages: true

    - name: prevent packages from being upgraded
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubeadm
        - kubectl
        - kubelet

    - name: add kubectl alias and completion bash to .bashrc
      become: yes
      become_user: ubuntu
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          complete -o default -F __start_kubectl k
          export KUBE_EDITOR=nano
          export PATH=$HOME/.krew/bin:$PATH
        create: true

    - name: set crictl endpoint
      shell: crictl config --set runtime-endpoint={{ cri_socket }} --set image-endpoint={{ cri_socket }}

- import_playbook: cri-cri-o.yml
  when: cri_socket == 'unix:///var/run/crio/crio.sock'

- import_playbook: cri-containerd.yml
  when: cri_socket == 'unix:///run/containerd/containerd.sock'

- import_playbook: cri-docker.yml
  when: cri_socket == 'unix:///var/run/cri-dockerd.sock'
